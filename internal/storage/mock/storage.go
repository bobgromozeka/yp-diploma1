// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	models "github.com/bobgromozeka/yp-diploma1/internal/models"
	storage "github.com/bobgromozeka/yp-diploma1/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockUsersStorage is a mock of UsersStorage interface.
type MockUsersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUsersStorageMockRecorder
}

// MockUsersStorageMockRecorder is the mock recorder for MockUsersStorage.
type MockUsersStorageMockRecorder struct {
	mock *MockUsersStorage
}

// NewMockUsersStorage creates a new mock instance.
func NewMockUsersStorage(ctrl *gomock.Controller) *MockUsersStorage {
	mock := &MockUsersStorage{ctrl: ctrl}
	mock.recorder = &MockUsersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersStorage) EXPECT() *MockUsersStorageMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockUsersStorage) AuthUser(ctx context.Context, login, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, login, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockUsersStorageMockRecorder) AuthUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockUsersStorage)(nil).AuthUser), ctx, login, password)
}

// CreateUser mocks base method.
func (m *MockUsersStorage) CreateUser(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersStorageMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersStorage)(nil).CreateUser), ctx, login, password)
}

// MockOrdersStorage is a mock of OrdersStorage interface.
type MockOrdersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersStorageMockRecorder
}

// MockOrdersStorageMockRecorder is the mock recorder for MockOrdersStorage.
type MockOrdersStorageMockRecorder struct {
	mock *MockOrdersStorage
}

// NewMockOrdersStorage creates a new mock instance.
func NewMockOrdersStorage(ctrl *gomock.Controller) *MockOrdersStorage {
	mock := &MockOrdersStorage{ctrl: ctrl}
	mock.recorder = &MockOrdersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersStorage) EXPECT() *MockOrdersStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrdersStorage) CreateOrder(ctx context.Context, number string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, number, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersStorageMockRecorder) CreateOrder(ctx, number, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersStorage)(nil).CreateOrder), ctx, number, userID)
}

// GetLatestUnprocessedOrders mocks base method.
func (m *MockOrdersStorage) GetLatestUnprocessedOrders(ctx context.Context, count int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUnprocessedOrders", ctx, count)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUnprocessedOrders indicates an expected call of GetLatestUnprocessedOrders.
func (mr *MockOrdersStorageMockRecorder) GetLatestUnprocessedOrders(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUnprocessedOrders", reflect.TypeOf((*MockOrdersStorage)(nil).GetLatestUnprocessedOrders), ctx, count)
}

// GetUserOrders mocks base method.
func (m *MockOrdersStorage) GetUserOrders(ctx context.Context, userID int64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrdersStorageMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrdersStorage)(nil).GetUserOrders), ctx, userID)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrdersStorage) UpdateOrderStatus(ctx context.Context, number, status string, accrual *float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, number, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrdersStorageMockRecorder) UpdateOrderStatus(ctx, number, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrdersStorage)(nil).UpdateOrderStatus), ctx, number, status, accrual)
}

// MockWithdrawalsStorage is a mock of WithdrawalsStorage interface.
type MockWithdrawalsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalsStorageMockRecorder
}

// MockWithdrawalsStorageMockRecorder is the mock recorder for MockWithdrawalsStorage.
type MockWithdrawalsStorageMockRecorder struct {
	mock *MockWithdrawalsStorage
}

// NewMockWithdrawalsStorage creates a new mock instance.
func NewMockWithdrawalsStorage(ctrl *gomock.Controller) *MockWithdrawalsStorage {
	mock := &MockWithdrawalsStorage{ctrl: ctrl}
	mock.recorder = &MockWithdrawalsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalsStorage) EXPECT() *MockWithdrawalsStorageMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockWithdrawalsStorage) GetUserBalance(ctx context.Context, userID int64) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockWithdrawalsStorageMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockWithdrawalsStorage)(nil).GetUserBalance), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockWithdrawalsStorage) GetUserWithdrawals(ctx context.Context, userID int64) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockWithdrawalsStorageMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockWithdrawalsStorage)(nil).GetUserWithdrawals), ctx, userID)
}

// Withdraw mocks base method.
func (m *MockWithdrawalsStorage) Withdraw(ctx context.Context, userID int64, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawalsStorageMockRecorder) Withdraw(ctx, userID, orderNumber, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawalsStorage)(nil).Withdraw), ctx, userID, orderNumber, sum)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// CreateOrdersStorage mocks base method.
func (m *MockFactory) CreateOrdersStorage() storage.OrdersStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrdersStorage")
	ret0, _ := ret[0].(storage.OrdersStorage)
	return ret0
}

// CreateOrdersStorage indicates an expected call of CreateOrdersStorage.
func (mr *MockFactoryMockRecorder) CreateOrdersStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrdersStorage", reflect.TypeOf((*MockFactory)(nil).CreateOrdersStorage))
}

// CreateUsersStorage mocks base method.
func (m *MockFactory) CreateUsersStorage() storage.UsersStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsersStorage")
	ret0, _ := ret[0].(storage.UsersStorage)
	return ret0
}

// CreateUsersStorage indicates an expected call of CreateUsersStorage.
func (mr *MockFactoryMockRecorder) CreateUsersStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersStorage", reflect.TypeOf((*MockFactory)(nil).CreateUsersStorage))
}

// CreateWithdrawalsStorage mocks base method.
func (m *MockFactory) CreateWithdrawalsStorage() storage.WithdrawalsStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawalsStorage")
	ret0, _ := ret[0].(storage.WithdrawalsStorage)
	return ret0
}

// CreateWithdrawalsStorage indicates an expected call of CreateWithdrawalsStorage.
func (mr *MockFactoryMockRecorder) CreateWithdrawalsStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawalsStorage", reflect.TypeOf((*MockFactory)(nil).CreateWithdrawalsStorage))
}
